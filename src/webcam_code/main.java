package webcam_code;

import com.github.sarxos.webcam.Webcam;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author kanishka
 */
public class main extends javax.swing.JFrame {

    CameraThread cam = null;

    /**
     * Creates new form main
     */
    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        start_webcam = new javax.swing.JButton();
        stop_webcam = new javax.swing.JButton();
        webcam_out = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        webcam_lbl = new javax.swing.JLabel();
        webcam_details = new javax.swing.JLabel();
        ip_lbl = new javax.swing.JLabel();
        ip_display = new javax.swing.JLabel();
        join_webcam = new javax.swing.JButton();
        exit_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        start_webcam.setText("Start Webcam");
        start_webcam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                start_webcamMouseClicked(evt);
            }
        });

        stop_webcam.setText("Stop Webcam");
        stop_webcam.setMinimumSize(new java.awt.Dimension(184, 30));
        stop_webcam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stop_webcamMouseClicked(evt);
            }
        });

        webcam_out.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        webcam_out.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        webcam_out.setMaximumSize(new java.awt.Dimension(376, 244));
        webcam_out.setMinimumSize(new java.awt.Dimension(376, 244));
        webcam_out.setPreferredSize(new java.awt.Dimension(376, 244));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        webcam_lbl.setText("Webcam:");

        webcam_details.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ip_lbl.setText("Connected To:");

        ip_display.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        ip_display.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ip_display.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(webcam_lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(webcam_details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ip_lbl)
                        .addGap(18, 18, 18)
                        .addComponent(ip_display, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(6, 6, 6))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(webcam_details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(webcam_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ip_lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(ip_display, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 21, Short.MAX_VALUE))
        );

        join_webcam.setText("Join Webcam");
        join_webcam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                join_webcamMouseClicked(evt);
            }
        });

        exit_btn.setText("Exit Webcam");
        exit_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exit_btnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(start_webcam, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(join_webcam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(webcam_out, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(stop_webcam, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(exit_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(webcam_out, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start_webcam)
                    .addComponent(join_webcam))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stop_webcam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exit_btn))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void start_webcamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_start_webcamMouseClicked
        cam = new CameraThread("CamThread", webcam_out, webcam_details);
        cam.start();
        join_webcam.setEnabled(false);
        Server server = new Server("Server Thread", ip_display);
        server.start();
    }//GEN-LAST:event_start_webcamMouseClicked

    private void stop_webcamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stop_webcamMouseClicked
        cam.stop();
    }//GEN-LAST:event_stop_webcamMouseClicked

    private void join_webcamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_join_webcamMouseClicked
        String server_ip = JOptionPane.showInputDialog("Please enter IP to connect to:");
        Client client = new Client("Client Thread", server_ip, 12345, ip_display);
        client.start();
        start_webcam.setEnabled(false);
        cam = new CameraThread("CamThread", webcam_out, webcam_details);
        cam.start();
    }//GEN-LAST:event_join_webcamMouseClicked

    private void exit_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit_btnMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exit_btnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exit_btn;
    private javax.swing.JLabel ip_display;
    private javax.swing.JLabel ip_lbl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton join_webcam;
    private javax.swing.JButton start_webcam;
    private javax.swing.JButton stop_webcam;
    private javax.swing.JLabel webcam_details;
    private javax.swing.JLabel webcam_lbl;
    private javax.swing.JLabel webcam_out;
    // End of variables declaration//GEN-END:variables
}

class Client implements Runnable {

    private Thread t;
    private Socket client_sock;
    private final String threadName;
    private String ip;
    private int port;
    private JLabel conn_details;

    Client(String name, String server_ip, int server_port, JLabel ip_display) {
        threadName = name;
        client_sock = null;
        ip = server_ip;
        port = server_port;
        conn_details = ip_display;
    }

    @Override
    public void run() {
        try {
            client_sock = new Socket(InetAddress.getByName(ip), port);
            conn_details.setText("" + client_sock.getInetAddress().toString());
            System.out.println("CONNECTED TO SERVER");
        } catch (Exception e) {

        }
    }

    public void start() {
        if (t == null) {
            t = new Thread(this, threadName);
            t.start();
        }
    }
}

class Server implements Runnable {

    private Thread t;
    private final String threadName;
    private ServerSocket serv_sock;
    private Socket client_sock;
    private JLabel conn_details;

    Server(String name, JLabel server_details) {
        threadName = name;
        serv_sock = null;
        client_sock = null;
        conn_details = server_details;
    }

    @Override
    public void run() {
        try {
            serv_sock = new ServerSocket(12345);
            conn_details.setText("Waiting For Client");
            client_sock = serv_sock.accept();
            conn_details.setText(client_sock.getInetAddress().toString() + ":" + client_sock.getPort());
        } catch (Exception e) {

        }
    }

    public void start() {
        if (t == null) {
            t = new Thread(this, threadName);
            t.start();
        }
    }
}

class CameraThread implements Runnable {

    private Thread t;
    private final String threadName;
    private final JLabel cam_output;
    private Webcam webcam = null;
    private final JLabel cam_details;

    CameraThread(String name, JLabel output, JLabel webcam_details) {
        threadName = name;
        cam_output = output;
        cam_details = webcam_details;
    }

    @Override
    public void run() {
        try {
            webcam = Webcam.getDefault();
            if (webcam != null) {
                cam_details.setText(webcam.getName());
            } else {
                System.out.println("No Webcam Detected");
            }
            webcam.open();
            while (true) {
                BufferedImage bi = webcam.getImage();
                Image img = bi.getScaledInstance(cam_output.getWidth(), cam_output.getHeight(), Image.SCALE_SMOOTH);
                cam_output.setIcon(new ImageIcon(img));
            }
        } catch (Exception e) {
            System.out.println("Thread: " + e.getMessage());
        }
    }

    public void start() {
        if (t == null) {
            t = new Thread(this, threadName);
            t.start();
        }
    }

    public void stop() {
        webcam.close();
        t.interrupt();
        try {
            Thread.sleep(500);
        } catch (Exception e) {
            System.out.println("Stop Error: " + e.getMessage());
        }
        cam_output.setIcon(null);
        cam_output.setText("CAMERA OFF");
        cam_output.repaint();
    }
}
